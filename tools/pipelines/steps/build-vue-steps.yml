steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '15.x'
    displayName: 'Install Node.js'

#  - task: Cache@2
#    displayName: Load NPM cache
#    inputs:
#      key: npm | $(Agent.OS) | $(Build.SourcesDirectory)/${{parameters.workingDir}}/yarn.lock
#      restoreKeys: |
#        npm | "$(Agent.OS)"
#      path: $(Build.SourcesDirectory)/${{parameters.workingDir}}/node_modules
#      cacheHitVar: CACHE_HIT

  - task: Yarn@3
    condition: ne(variables['CACHE_HIT'], 'true')
    inputs:
     customRegistry: 'useFeed'
     customFeed: ${{ parameters.packageFeed }}
     arguments: --frozen-lockfile
    displayName: 'Install NPM dependencies'

  - script: yarn affected
    displayName: 'Show affected packages'

  - task: Bash@3
    inputs:
      filePath: 'tools/scripts/generate_yarn_command.sh'
      arguments: ${{ parameters.workingDir }} lint
    displayName: "Lint affected packages"
    condition: and(succeeded(), eq('${{ parameters.lint }}', true))

  - task: Bash@3
    inputs:
      filePath: 'tools/scripts/generate_yarn_command.sh'
      arguments: ${{ parameters.workingDir }} coverage
    displayName: "Test affected packages"
    condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))

  # Publish Result #
  - task: PublishTestResults@2
    condition: and(succeededOrFailed(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
    inputs:
#      searchFolder: ${{ parameters.workingDir }}
      testRunner: VSTest
      testResultsFiles: '**/*result*.trx'
      failTaskOnFailedTests: false
    displayName: 'Publish Test Result'

  - task: PublishCodeCoverageResults@1
    inputs:
#      pathToSources: ${{ parameters.workingDir }}
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '**/*cobertura*.xml'
      failIfCoverageEmpty: false
    displayName: 'Publish Code Coverage Result'
    condition: eq(variables['build.sourceBranch'], 'refs/heads/master')

  # Building app by yarn #
  - script: yarn ${{ parameters.lokaliseCommand }}
    workingDirectory: ${{ parameters.workingDir }}
    displayName: 'Lokalise Sync'
    condition: and(succeeded(), eq('${{ parameters.lokalise }}', true))

  - script: yarn ${{ parameters.buildCommand }}
    workingDirectory: ${{ parameters.workingDir }}
    displayName: 'Build'

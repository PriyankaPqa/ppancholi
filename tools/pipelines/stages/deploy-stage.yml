parameters:
  storage: ''
  cdnEndpoint: ''
  cdnProfile: ''
  dnsName: 'crc-tech.ca'
  packageFeed: ''
  nodeJsVersion: ''
  testCommand: ''
  disableCache: ''
  appName: ''
  runAcceptanceStage: false

stages:
- ${{ if eq( variables['build.reason'], 'PullRequest') }}:
  - stage: 'Deploy_to_storage'
    displayName: 'Deploy for manual testing'
    dependsOn: 'Build_Stage'
    condition: succeeded()
    pool:
      vmImage: 'windows-2022'
    jobs:
      - deployment: 'Deploy_WebApp_Storage'
        displayName: 'Deployment'
        environment: 'Dev'
        variables:
          - group: Env-Dev-Vite
          - name: featureStorageName
            value: ''
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureCLI@2
                  displayName: 'Storage Account Validation'
                  inputs:
                    azureSubscription: 'CRC Tech Dev'
                    scriptType: 'pscore'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      $branchname = '$(System.PullRequest.SourceBranch)'.Split('/')[3]          
                      
                      echo $branchname;
                      
                      $cdnEndpointSplit = '$(cdnEndpoint)'.Split('-');
                      $cdnProfileSplit = '$(cdnProfile)'.Split('-');          
                      $application = $cdnEndpointSplit[2]
                      
                      echo $application;
                      
                      $feature = $application + $branchname
                      $feature_name = $application + "-" + $branchname
                      
                      echo $feature;
                      echo $feature_name;
                      
                      $redirect_uri = "$(VITE_AUTH_AAD_REDIRECT_URI)" -replace "$(Environment)", $branchname
                      
                      $cdn_endpoint = $cdnEndpointSplit[0] + "-" + $cdnEndpointSplit[1] + "-" + $feature
                      $cdn_profile = $cdnProfileSplit[0] + "-" + $cdnProfileSplit[1] + "-" + $feature
                      
                      $cdn_endpoint_name = $cdn_endpoint + "-$(environment)"
                      $cdn_profile_name = $cdn_profile + "-$(environment)"
                      $resourceGroup = '$(ResourceGroup)' -replace "dev", "features"
                      
                      #Passing the featureStorageName variable with the feature value. So it can be used for the next tasks
                      echo "##vso[task.setvariable variable=application]$application"
                      echo "##vso[task.setvariable variable=featureNumber]$branchname"
                      echo "##vso[task.setvariable variable=cdnProfile]$cdn_profile"
                      echo "##vso[task.setvariable variable=cdnProfileName]$cdn_profile_name"
                      echo "##vso[task.setvariable variable=cdnEndpoint]$cdn_endpoint"
                      echo "##vso[task.setvariable variable=cdnEndpointName]$cdn_endpoint_name"
                      echo "##vso[task.setvariable variable=featureStorageName]$feature"
                      echo "##vso[task.setvariable variable=featureName]$feature_name"
                      echo "##vso[task.setvariable variable=featureResourceGroup]$resourceGroup"
                      echo "##vso[task.setvariable variable=VITE_AUTH_AAD_POSTLOGOUT_REDIRECT_URI]$redirect_uri"
                      echo "##vso[task.setvariable variable=VITE_AUTH_AAD_REDIRECT_URI]$redirect_uri"
                      
                      $account = az storage account list --query "[?name=='$feature']" | ConvertFrom-Json
                      $exists = $account.length -gt 0 
                      
                      if (-not $exists) {
                          throw "The storage account $feature does not exist. You need to submit a terraform PR to create your storage account"
                      } 
                      
                      echo "The files will be uploaded to the storage account $feature accessed at $redirect_uri"

                - task: replacetokens@3
                  displayName: 'Replace Tokens'
                  inputs:
                    targetFiles: "$(Pipeline.Workspace)/dist/**/index*.js"
                    encoding: "auto"
                    writeBOM: true
                    verbosity: "detailed"
                    actionOnMissing: "warn"
                    keepToken: false
                    tokenPrefix: "#{"
                    tokenSuffix: "}#"
                    useLegacyPattern: false
                    enableTelemetry: true

                - task: AzureCLI@2
                  displayName: 'Clean Storage Folder'
                  inputs:
                    azureSubscription: 'CRC Tech Dev'
                    scriptType: 'pscore'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      az storage blob delete-batch --source '$web' --account-name $(featureStorageName)

                - task: AzureFileCopy@3
                  displayName: 'Upload to Azure'
                  inputs:
                    sourcePath: '$(Pipeline.Workspace)/dist'
                    azureSubscription: 'CRC Tech Dev'
                    destination: 'AzureBlob'
                    storage: $(featureStorageName)
                    containerName: '$web'

                - task: AzureCLI@2
                  displayName: 'Purge CDN'
                  continueOnError: true
                  inputs:
                    azureSubscription: 'CRC Tech Dev'
                    scriptType: 'pscore'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      az cdn endpoint purge -n "$(cdnEndpointName)" -g "$(featureResourceGroup)" --profile-name "$(cdnProfileName)" --content-paths "/*" --no-wait

                - task: AzureCLI@2
                  displayName: 'Create Custom Domain'
                  continueOnError: true
                  inputs:
                    azureSubscription: 'CRC Tech Dev'
                    scriptType: 'pscore'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      $customDomain = "$(featureName).${{ parameters.dnsName }}"
                      $customDomains = az cdn custom-domain list --endpoint-name "$(cdnEndpointName)" --resource-group "$(featureResourceGroup)" --profile-name "$(cdnProfileName)" | ConvertFrom-Json
                      $exists = $customDomains.count -gt 0
                      
                      echo "##vso[task.setvariable variable=customDomain]$customDomain"
                      
                      if ($exists){
                        echo "Custom domain of $customDomain for $(cdnEndpointName) exists"
                      } else {
                        echo "Creating custom domain of $customDomain for $(cdnEndpointName)"
                        az cdn custom-domain create --endpoint-name "$(cdnEndpointName)" --resource-group "$(featureResourceGroup)" --profile-name "$(cdnProfileName)" -n "$(featureName)" --hostname "$customDomain"
                      
                        echo "Enabling HTTPS for $customDomain"
                        az cdn custom-domain enable-https --endpoint-name "$(cdnEndpointName)" --resource-group "$(featureResourceGroup)" --profile-name "$(cdnProfileName)" -n "$(featureName)"
                      }


#  - stage: 'AcceptanceTest'
#    displayName: 'Acceptance Stage'
#    dependsOn: 'Deploy_to_storage'
#    condition: and(succeeded(), eq('${{ parameters.runAcceptanceStage }}', true))
#    jobs:
#      - template: '../jobs/acceptance-tests-azure-jobs.yml'
#        parameters:
#          packageFeed: ${{ parameters.packageFeed }}
#          nodeJsVersion: ${{ parameters.nodeJsVersion }}
#          testCommand: ${{ parameters.testCommand }}
#          disableCache: ${{ parameters.disableCache }}
#          appName: ${{ parameters.appName }}
- ${{ if eq( variables['build.sourceBranch'], 'refs/heads/master') }}:
  - stage: 'Deploy_to_Dev'
    displayName: 'Deploy to Dev'
    dependsOn: 'Acceptance_Test_Stage'
    condition: succeeded()
    pool:
      vmImage: 'windows-2022'
    jobs:
      - deployment: 'Deploy_WebApp_Dev'
        displayName: 'Deploy WebApp to Dev'
        environment: 'Dev'
        variables:
          - group: Env-Dev-Vite
        strategy:
          runOnce:
            deploy:
              steps:
                - task: replacetokens@3
                  displayName: 'Replace Tokens'
                  inputs:
                    targetFiles: "$(Pipeline.Workspace)/dist/**/index*.js"
                    encoding: "auto"
                    writeBOM: true
                    verbosity: "detailed"
                    actionOnMissing: "warn"
                    keepToken: false
                    tokenPrefix: "#{"
                    tokenSuffix: "}#"
                    useLegacyPattern: false
                    enableTelemetry: true

                - task: AzureCLI@2
                  displayName: 'Clean Storage Folder'
                  inputs:
                    azureSubscription: 'CRC Tech Dev'
                    scriptType: 'pscore'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      az storage blob delete-batch --source '$web' --account-name ${{ parameters.storage }}$(environment)

                - task: AzureFileCopy@3
                  displayName: 'Upload to Azure'
                  inputs:
                    sourcePath: '$(Pipeline.Workspace)/dist'
                    azureSubscription: 'CRC Tech Dev'
                    destination: 'AzureBlob'
                    storage: '${{ parameters.storage }}$(environment)'
                    containerName: '$web'

                - task: AzureCLI@2
                  displayName: 'Purge CDN'
                  inputs:
                    azureSubscription: 'CRC Tech Dev'
                    scriptType: 'pscore'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      az cdn endpoint purge -n "${{ parameters.cdnEndpoint }}-$(environment)" -g "$(ResourceGroup)" --profile-name "${{ parameters.cdnProfile }}-$(environment)" --content-paths "/*" --no-wait

  - stage: 'Deploy_to_Lab'
    displayName: 'Deploy to Lab'
    dependsOn: 'Post_Build_Stage'
    condition: succeeded()
    pool:
      vmImage: 'windows-2022'
    jobs:
      - deployment: 'Deploy_WebApp_Lab'
        displayName: 'Deploy WebApp to Lab'
        environment: 'Lab'
        variables:
          - group: Env-Lab-Vite
        strategy:
          runOnce:
            deploy:
              steps:
                - task: replacetokens@3
                  displayName: 'Replace Tokens'
                  inputs:
                    targetFiles: "$(Pipeline.Workspace)/dist/**/index*.js"
                    encoding: "auto"
                    writeBOM: true
                    verbosity: "detailed"
                    actionOnMissing: "warn"
                    keepToken: false
                    tokenPrefix: "#{"
                    tokenSuffix: "}#"
                    useLegacyPattern: false
                    enableTelemetry: true

                - task: AzureCLI@2
                  displayName: 'Clean Storage Folder'
                  inputs:
                    azureSubscription: 'CRC Tech Dev'
                    scriptType: 'pscore'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      az storage blob delete-batch --source '$web' --account-name ${{ parameters.storage }}$(environment)

                - task: AzureFileCopy@3
                  displayName: 'Upload to Azure'
                  inputs:
                    sourcePath: '$(Pipeline.Workspace)/dist'
                    azureSubscription: 'CRC Tech Dev'
                    destination: 'AzureBlob'
                    storage: '${{ parameters.storage }}$(environment)'
                    containerName: '$web'

                - task: AzureCLI@2
                  displayName: 'Purge CDN'
                  inputs:
                    azureSubscription: 'CRC Tech Dev'
                    scriptType: 'pscore'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      az cdn endpoint purge -n "${{ parameters.cdnEndpoint }}-$(environment)" -g "$(ResourceGroup)" --profile-name "${{ parameters.cdnProfile }}-$(environment)" --content-paths "/*" --no-wait


- ${{ if eq(variables['build.sourceBranch'], 'refs/heads/master') }}:
  - stage: 'Deploy_to_Prod'
    displayName: 'Deploy to Prod'
    dependsOn: 'Deploy_to_Dev'
    condition: succeeded()
    pool:
      vmImage: 'windows-2022'
    jobs:
      - deployment: 'Deploy_WebApp_Prod'
        displayName: 'Deploy WebApp to Prod'
        environment: 'Prod-UI'
        variables:
          - group: Env-Prod-Vite
        strategy:
          runOnce:
            deploy:
              steps:
                - task: replacetokens@3
                  displayName: 'Replace Tokens'
                  inputs:
                    targetFiles: "$(Pipeline.Workspace)/dist/**/index*.js"
                    encoding: "auto"
                    writeBOM: true
                    verbosity: "detailed"
                    actionOnMissing: "warn"
                    keepToken: false
                    tokenPrefix: "#{"
                    tokenSuffix: "}#"
                    useLegacyPattern: false
                    enableTelemetry: true

                - task: AzureCLI@2
                  displayName: 'Clean Storage Folder'
                  inputs:
                    azureSubscription: 'CRC Tech Prod'
                    scriptType: 'pscore'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      az storage blob delete-batch --source '$web' --account-name ${{ parameters.storage }}$(environment)

                - task: AzureFileCopy@3
                  displayName: 'Upload to Azure'
                  inputs:
                    sourcePath: '$(Pipeline.Workspace)/dist'
                    azureSubscription: 'CRC Tech Prod'
                    destination: 'AzureBlob'
                    storage: '${{ parameters.storage }}$(environment)'
                    containerName: '$web'

                - task: AzureCLI@2
                  displayName: 'Purge CDN'
                  inputs:
                    azureSubscription: 'CRC Tech Prod'
                    scriptType: 'pscore'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      az cdn endpoint purge -n "${{ parameters.cdnEndpoint }}-$(environment)" -g "$(ResourceGroup)" --profile-name "${{ parameters.cdnProfile }}-$(environment)" --content-paths "/*" --no-wait

parameters:
  appName: ''
  packageFeed: ''
  isPullRequest: ''
  nodeJsVersion: ''
  disableCache: ''

stages:
  - stage: 'Post_Build_Stage'
    displayName: 'Tests'
    condition: succeeded()
    jobs:
      - job: 'Test'
        strategy:
          parallel: 3
        displayName: 'Test affected packages'
        steps:
          - template: '../steps/cache-install-npm.yml'
            parameters:
              packageFeed: ${{ parameters.packageFeed }}
              nodeJsVersion:  ${{ parameters.nodeJsVersion }}
              disableCache: ${{ parameters.disableCache }}

          - script: yarn test:parallel ${{parameters.isPullRequest}} ${{parameters.appName}} $(System.TotalJobsInPhase) $(System.JobPositionInPhase)
            displayName: 'Run tests & Create coverage'

          - task: PublishPipelineArtifact@1
            condition: eq(variables['build.sourceBranch'], 'refs/heads/master') # We only publish coverage after merge, so no need to create the artifact here
            displayName: 'Create coverage artifacts'
            inputs:
              path: $(Build.SourcesDirectory)/coverage/ # Create artifact with what's inside coverage folder

          - task: PublishTestResults@2
            displayName: 'Publish Test Result'
            condition: and(succeededOrFailed(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
            inputs:
              testRunner: VSTest
              testResultsFiles: '**/*test*.trx'
              failTaskOnFailedTests: false

      - job: 'Publish_Test_Coverage'
        dependsOn: 'Test'
        displayName: 'Publish Coverage'
        condition: eq(variables['build.sourceBranch'], 'refs/heads/master')
        steps:
          - template: '../steps/cache-install-npm.yml'
            parameters:
              packageFeed: ${{ parameters.packageFeed }}
              disableCache: ${{ parameters.disableCache }}

          - task: DownloadPipelineArtifact@2
            displayName: 'Download coverage artifacts'
            inputs:
              downloadPath: $(Build.SourcesDirectory) # Download code coverage artifact
              itemPattern: '**/**/cobertura-coverage.xml'

          - script: node ./tools/scripts/merge-test-coverage.js $(Build.SourcesDirectory) # Look for coverage file in Build.SourcesDirectory
            displayName: 'Merge code coverage reports'

          - task: PublishCodeCoverageResults@1
            displayName: 'Publish code coverage'
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: '$(Build.SourcesDirectory)/coverage/merged-cobertura-coverage.xml'
              failIfCoverageEmpty: false

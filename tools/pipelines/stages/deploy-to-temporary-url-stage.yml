parameters:
  cdnEndpoint: ""
  cdnProfile: ""
  dnsName: "crc-tech.ca"
  storage: ""

stages:
  - stage: "Deploy_to_storage"
    displayName: "Deploy feature"
    dependsOn: "Build_Stage"
    condition: succeeded()
    jobs:
      - deployment: "Deploy_WebApp_Storage"
        displayName: "Deploy WebApp to temporary URL"
        environment: "Lab"
        variables:
          - group: Env-Lab
          - name: branchId
            value: ""
        strategy:
          runOnce:
            deploy:
              steps:
                - powershell: |
                   $branchId = '$(System.PullRequest.SourceBranch)'.Split('/')[3]
                   echo "Branch id is:" $branchId
                   echo "##vso[task.setvariable variable=branchId]$branchId"
                
                - task: qetza.replacetokens.replacetokens-task.replacetokens@6
                  displayName: "Replace Tokens"
                  inputs:
                    sources: "$(Pipeline.Workspace)/dist/**/index*.js"
                    addBOM: true
                    telemetryOptout: true

                - task: AzureCLI@2
                  displayName: "Upload and Move Content in Azure Storage"
                  inputs:
                    azureSubscription: "CRC Tech Dev"
                    scriptType: "pscore"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      $accountName = '${{ parameters.storage }}$(environment)'
                      $containerName = '$web'
                      $sourcePrefix = "$(branchId)/$(branchId)/"
                      $sourcePath = "$(Pipeline.Workspace)/dist"

                        echo "accountName is:" $accountName

                      # Upload files to Azure Storage
                      az storage blob upload-batch --overwrite --destination "$containerName/$(branchId)" --account-name $accountName --source $sourcePath

                      # List blobs in the source directory
                      $blobs = az storage blob list --account-name $accountName --container-name $containerName --prefix $sourcePrefix --query '[].{name:name}' --output tsv

                      # Move each blob to the target directory
                      foreach ($blob in $blobs) {
                        $sourceBlobName = $blob
                        $sourceUri = "https://$accountName.blob.core.windows.net/$containerName/$sourceBlobName"
                        $destinationBlobName = $sourceBlobName.Substring($sourceBlobName.IndexOf($sourcePrefix) + $sourcePrefix.Length)
                        $destinationUri = "https://$accountName.blob.core.windows.net/$containerName/$(branchId)/$destinationBlobName"

                        echo "sourceBlobName is:" $sourceBlobName
                        echo "sourceUri is:" $sourceUri
                        echo "destinationBlobName is:" $destinationBlobName
                        echo "destinationUri is:" $destinationUri

                        # Start the copy operation
                        $copyResult = az storage blob copy start --source-uri $sourceUri --destination-blob $(branchId)/$destinationBlobName --account-name $accountName --container-name $containerName

                        # Check the copy status
                        $copyStatus = "pending"
                        while ($copyStatus -eq "pending") {
                          $blobProperties = az storage blob show --account-name $accountName --container-name $containerName --name $(branchId)/$destinationBlobName --query 'properties.copy.status' --output tsv
                          if ($blobProperties -eq "success") {
                            $copyStatus = "complete"
                          } elseif ($blobProperties -eq "failed") {
                            Write-Error "Blob copy failed for $sourceUri to $destinationUri"
                            exit 1
                          } else {
                            # Wait before rechecking
                            Start-Sleep -Seconds 5
                          }
                        }

                        # Delete the source blob
                        az storage blob delete --account-name $accountName --container-name $containerName --name $sourceBlobName
                      }

                ## TODO Check what to do with this specifically with the content-path
                - task: AzureCLI@2
                  displayName: "Purge CDN"
                  continueOnError: true
                  inputs:
                    azureSubscription: "CRC Tech Dev"
                    scriptType: "pscore"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                       az cdn endpoint purge -n "${{ parameters.cdnEndpoint }}-$(environment)" -g "$(ResourceGroup)" --profile-name "${{ parameters.cdnProfile }}-$(environment)" --content-paths "/*" --no-wait


